defmodule CaseAstComparisonTest do
  use ExUnit.Case, async: true
  import Lipex

  describe "case expression functionality verification" do
    test "case AST is equivalent to Elixir case AST" do
      # Create a lipex case expression in the format expected by eval_lipex_expr
      lipex_case_expr = quote do deflipex ~~((case 1
            2 3))

        end

      # # Get the AST generated by lipex
      # lipex_generated_ast = Lipex.eval_lipex_expr(lipex_case_expr)

      # # Create equivalent Elixir case expression AST with matching wildcard context
      elixir_case_ast = quote do
        case :test do
          :ok -> :success
          :error -> :failure
          _ -> :unknown
        end
      end

      # # Compare the AST structures - they should be equivalent
      # assert lipex_generated_ast == elixir_case_ast

      # # Also verify the structure is what we expect
      # assert match?({:case, _, [:test, [do: _]]}, lipex_generated_ast)

      # # Extract and verify the clause structure
      # {:case, _, [:test, [do: clauses]]} = lipex_generated_ast
      # assert length(clauses) == 3
      # assert match?([{:->, _, [[:ok], :success]} | _], clauses)
    end
  end
end
